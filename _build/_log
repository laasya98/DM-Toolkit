### Starting build.
# Target: test.ml.depends, tags: { package(oUnit), package(qcheck), package(str), package(unix), extension:ml, file:test.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -modules test.ml > test.ml.depends # cached
# Target: character.mli.depends, tags: { package(oUnit), package(qcheck), package(str), package(unix), extension:mli, file:character.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -modules character.mli > character.mli.depends # cached
# Target: global.mli.depends, tags: { package(oUnit), package(qcheck), package(str), package(unix), extension:mli, file:global.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -modules global.mli > global.mli.depends # cached
# Target: global.cmi, tags: { package(oUnit), package(qcheck), package(str), package(unix), byte, compile, extension:mli, file:global.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -o global.cmi global.mli # cached
# Target: character.cmi, tags: { package(oUnit), package(qcheck), package(str), package(unix), byte, compile, extension:mli, file:character.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -o character.cmi character.mli # cached
# Target: event.mli.depends, tags: { package(oUnit), package(qcheck), package(str), package(unix), extension:mli, file:event.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -modules event.mli > event.mli.depends # cached
# Target: event.cmi, tags: { package(oUnit), package(qcheck), package(str), package(unix), byte, compile, extension:mli, file:event.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -o event.cmi event.mli # cached
# Target: test.cmo, tags: { package(oUnit), package(qcheck), package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -o test.cmo test.ml # cached
# Target: character.ml.depends, tags: { package(oUnit), package(qcheck), package(str), package(unix), extension:ml, file:character.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -modules character.ml > character.ml.depends
# Target: event.ml.depends, tags: { package(oUnit), package(qcheck), package(str), package(unix), extension:ml, file:event.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -modules event.ml > event.ml.depends # cached
# Target: character.cmo, tags: { package(oUnit), package(qcheck), package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:character.cmo, file:character.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -o character.cmo character.ml
# Target: event.cmo, tags: { package(oUnit), package(qcheck), package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:event.cmo, file:event.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -o event.cmo event.ml
# Target: test.byte, tags: { package(oUnit), package(qcheck), package(str), package(unix), byte, dont_link_with, extension:byte, file:test.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package unix -package oUnit -package str -package qcheck character.cmo event.cmo test.cmo -o test.byte
# Compilation successful.
